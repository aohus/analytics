#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Sun Jun 25 23:50:03 2017

@author: Yusoo
"""


import random
import midi
from midiutil import MIDIFile
#song=[69, 67, 70, 69, 67, 70, 69, 65, 65, 67, 65, 72, 72, 72, 69, 72, 72, 69, 72, 72, 72, 72, 69, 72, 74, 70, 69, 72, 72, 69, 72, 72, 69, 72, 72, 69, 72, 69, 72, 74, 70, 69, 69, 69, 70, 69, 69, 69, 69, 70, 69, 70, 69, 69, 72, 72, 72, 69, 72, 72, 69, 72, 69, 72, 69, 72, 72, 69, 72, 74, 70, 69, 72, 72, 72, 69, 72, 72, 69, 72, 72, 72, 69, 72, 69, 72, 74, 70, 69, 69, 69, 69, 70, 69, 70, 69, 72, 65, 65, 65, 67, 69, 69, 60, 60, 65, 67, 69, 60, 65, 67, 69, 67, 65, 67, 65, 65, 65, 67, 69, 67, 70, 69, 65, 67, 65, 60, 65, 67, 69, 60, 65, 67, 69, 67, 65, 65, 67, 65, 60, 65, 65, 67, 69, 67, 70, 69, 65, 67, 65, 69, 72, 72, 69, 72, 72, 69, 72, 72, 72, 69, 72, 69, 72, 74, 70, 69, 72, 72, 69, 72, 72, 69, 72, 72, 69, 72, 69, 72, 74, 70, 69, 69, 69, 70, 69, 69, 69, 69, 70, 69, 70, 72, 69, 77, 77, 77, 76, 76, 74, 74, 72, 72, 70, 69, 70, 72, 65, 77, 77, 76, 76, 74, 74, 72, 72, 70, 69, 70, 72, 65, 72, 69, 69, 72, 69, 72, 69, 72, 69, 72, 72, 74, 77, 79, 77, 81, 84, 81, 79, 77, 79, 81, 60, 60, 65, 67, 69, 60, 65, 67, 69, 67, 65, 67, 65, 65, 65, 67, 69, 67, 70, 69, 65, 67, 65, 60, 65, 67, 69, 60, 65, 67, 69, 67, 65, 65, 67, 65, 60, 65, 65, 67, 69, 67, 70, 69, 65, 67, 65, 65, 67, 65, 72, 65, 67, 65, 72, 69, 65, 65, 67, 69, 67, 70, 69, 65, 67, 65, 60, 60, 65, 72, 69, 60, 65, 67, 69, 67, 65, 67, 65, 65, 65, 67, 69, 67, 70, 69, 65, 67, 65, 60, 65, 67, 69, 60, 65, 67, 69, 67, 70, 69, 67, 65, 60, 65, 65, 67, 69, 67, 65, 62, 70, 69, 65, 67, 65, 69, 74, 74, 74, 74, 77, 74, 74, 72, 74, 74, 74, 74, 77, 74, 74, 74, 74, 74, 74, 77, 74, 74, 72, 74, 74, 74, 74, 74, 74, 77, 79, 81, 74, 81, 79, 79, 79, 79, 79, 79, 79, 81, 79, 79, 79, 79, 79, 79, 74, 81, 79, 79, 79, 79, 77, 74, 79, 77, 74, 79, 77, 74, 74, 74, 74, 74, 74, 74, 74, 74, 77, 74, 74, 74, 74, 74, 74, 74, 74, 74, 77, 79, 81, 74, 74, 74, 74, 74, 77, 74, 74, 74, 74, 74, 74, 74, 77, 77, 77, 81, 81, 79, 79, 79, 79, 79, 79, 79, 79, 81, 81, 81, 79, 79, 79, 79, 79, 74, 81, 79, 79, 79, 79, 79, 79, 77, 77, 86, 81, 81, 81, 77, 79, 81, 82, 81, 79, 77, 77, 79, 74, 74, 77, 77, 79, 81, 81, 79, 77, 74, 81, 81, 81, 77, 79, 81, 82, 81, 79, 77, 77, 77, 79, 74, 74, 74, 77, 79, 81, 81, 79, 77, 74, 74, 74, 77, 77, 79, 81, 74, 74, 77, 79, 77, 81, 72, 76, 77, 79, 81, 81, 81, 81, 81, 79, 81, 79, 81, 79, 77, 81, 81, 81, 79, 81, 82, 81, 79, 77, 77, 77, 79, 74, 77, 79, 81, 81, 79, 77, 74, 69, 74, 74, 74, 74, 77, 74, 74, 69, 74, 74, 74, 74, 74, 77, 74, 74, 74, 74, 74, 74, 77, 74, 74, 74, 74, 74, 74, 77, 79, 81, 81, 81, 79, 79, 79, 79, 79, 79, 77, 81, 81, 79, 79, 79, 79, 79, 79, 79, 81, 81, 79, 79, 79, 77, 77, 74, 74, 79, 77, 74, 74, 79, 77, 74, 74, 74, 81, 79, 79, 79, 79, 77, 81, 74, 72, 74, 74, 72, 81, 79, 79, 79, 79, 77, 81, 74, 72, 74, 74, 72, 81, 79, 79, 79, 79, 79, 79, 79, 81, 79, 79, 79, 79, 79, 74, 79, 81, 79, 79, 79, 79, 79, 77, 77, 86, 81, 81, 81, 77, 79, 81, 82, 81, 79, 77, 77, 77, 79, 74, 74, 74, 77, 79, 81, 81, 79, 77, 74, 81, 81, 81, 77, 79, 81, 82, 81, 79, 77, 77, 77, 79, 74, 74, 74, 77, 79, 81, 81, 79, 77, 74, 74, 74, 77, 77, 79, 81, 74, 74, 77, 79, 77, 81, 72, 76, 77, 79, 81, 81, 81, 81, 81, 79, 81, 79, 81, 79, 77, 81, 81, 81, 79, 81, 82, 81, 79, 77, 77, 77, 79, 74, 77, 79, 81, 81, 79, 77, 74, 77, 81, 79, 81, 79, 77, 74, 77, 81, 79, 81, 79, 77, 74, 77, 81, 79, 81, 79, 77, 74, 77, 81, 79, 81, 79, 77, 79, 77, 81, 84, 81, 79, 77, 74, 77, 81, 84, 81, 79, 77, 82, 82, 81, 81, 79, 77, 81, 79, 81, 79, 81, 84, 84, 86, 81, 86, 81, 81, 81, 81, 77, 79, 81, 82, 81, 79, 77, 77, 79, 74, 74, 77, 77, 79, 81, 81, 79, 77, 74, 81, 81, 81, 77, 79, 81, 82, 81, 79, 77, 77, 77, 79, 74, 74, 74, 77, 79, 81, 81, 79, 77, 74, 74, 74, 77, 77, 79, 81, 74, 74, 77, 79, 77, 81, 72, 76, 77, 79, 81, 81, 81, 81, 81, 79, 81, 79, 81, 79, 77, 81, 81, 81, 79, 81, 82, 81, 79, 77, 77, 77, 79, 74, 77, 79, 81, 81, 79, 77, 74, 64, 68, 59, 64, 68, 59, 64, 68, 59, 64, 68, 59, 63, 66, 60, 63, 66, 60, 63, 66, 60, 63, 66, 60, 64, 68, 61, 64, 68, 61, 63, 66, 59, 63, 66, 59, 61, 64, 57, 61, 64, 57, 61, 64, 57, 61, 64, 57, 71, 76, 75, 76, 75, 76, 80, 75, 75, 75, 76, 76, 73, 78, 76, 73, 73, 78, 76, 73, 71, 76, 75, 76, 75, 76, 80, 71, 75, 75, 75, 76, 76, 73, 78, 76, 73, 73, 78, 76, 73, 73, 81, 80, 78, 75, 75, 76, 78, 76, 73, 73, 80, 78, 76, 75, 73, 75, 76, 73, 83, 81, 80, 73, 75, 76, 73, 83, 81, 80, 80, 81, 80, 81, 80, 81, 80, 78, 80, 80, 83, 83, 85, 80, 80, 80, 76, 78, 76, 73, 73, 80, 76, 78, 80, 78, 76, 75, 76, 75, 64, 68, 73, 63, 66, 71, 61, 64, 69, 71, 76, 75, 76, 75, 76, 80, 71, 75, 75, 76, 76, 75, 73, 73, 78, 76, 73, 73, 78, 76, 73, 71, 76, 75, 76, 75, 76, 80, 71, 83, 81, 80, 78, 81, 80, 78, 78, 76, 78, 80, 80, 78, 76, 78, 80, 81, 80, 73, 83, 81, 80, 78, 76, 78, 80, 76, 73, 73, 80, 78, 76, 75, 73, 75, 76, 73, 83, 81, 80, 73, 75, 76, 73, 83, 81, 80, 80, 81, 80, 81, 80, 81, 80, 78, 80, 80, 83, 83, 85, 80, 80, 80, 76, 78, 76, 73, 73, 80, 76, 78, 80, 78, 76, 75, 76, 75, 73, 73, 80, 71, 80, 71, 80, 81, 81, 81, 81, 81, 80, 80, 78, 76, 73, 71, 80, 80, 83, 80, 71, 80, 80, 83, 80, 71, 80, 80, 85, 83, 83, 80, 85, 85, 85, 85, 85, 83, 83, 81, 80, 80, 80, 81, 81, 80, 78, 78, 76, 83, 81, 80, 80, 80, 81, 80, 81, 80, 81, 81, 78, 80, 80, 83, 83, 85, 80, 80, 80, 76, 78, 76, 73, 73, 73, 80, 76, 78, 78, 80, 78, 76, 75, 76, 75, 73, 71, 76, 75, 76, 75, 76, 80, 75, 75, 75, 75, 76, 76, 75, 66, 69, 72, 65, 69, 72, 64, 67, 72, 74, 76, 66, 69, 72, 65, 69, 72, 60, 64, 55, 60, 64, 55, 60, 64, 55, 59, 62, 55, 76, 76, 76, 74, 76, 76, 74, 76, 74, 72, 76, 77, 77, 74, 74, 74, 72, 74, 72, 74, 74, 72, 69, 74, 76, 76, 76, 76, 76, 74, 76, 76, 74, 76, 74, 72, 76, 77, 79, 77, 76, 74, 74, 74, 74, 72, 74, 72, 74, 72, 74, 76, 72, 71, 72, 74, 69, 71, 84, 83, 81, 79, 83, 77, 77, 77, 77, 77, 77, 76, 77, 76, 72, 81, 79, 76, 79, 81, 76, 76, 74, 67, 69, 72, 76, 81, 81, 79, 76, 79, 81, 76, 74, 67, 69, 76, 74, 76, 72, 81, 81, 79, 79, 84, 81, 81, 79, 79, 79, 84, 81, 79, 79, 79, 77, 76, 74, 76, 79, 81, 79, 79, 84, 76, 74, 72, 69, 72, 74, 76, 74, 72, 74, 72, 72, 60, 64, 55, 60, 64, 55, 60, 64, 55, 59, 62, 55, 76, 76, 76, 74, 76, 76, 74, 76, 74, 72, 76, 77, 77, 74, 74, 74, 72, 74, 72, 74, 74, 72, 69, 74, 76, 76, 76, 79, 81, 81, 84, 84, 83, 83, 81, 79, 79, 81, 81, 79, 77, 76, 74, 72, 69, 74, 74, 74, 72, 74, 72, 74, 72, 74, 76, 72, 71, 72, 74, 69, 71, 84, 83, 81, 79, 83, 77, 77, 77, 77, 77, 77, 76, 77, 76, 72, 81, 79, 76, 79, 81, 76, 76, 74, 67, 69, 72, 76, 81, 81, 79, 76, 79, 81, 76, 74, 67, 69, 76, 74, 76, 72, 81, 81, 79, 79, 84, 81, 81, 79, 79, 79, 84, 81, 79, 79, 79, 77, 76, 74, 76, 79, 81, 79, 79, 84, 76, 74, 72, 69, 72, 74, 76, 74, 72, 74, 72, 72, 72, 76, 79, 81, 81, 79, 81, 79, 83, 79, 76, 79, 81, 79, 81, 84, 83, 84, 83, 81, 83, 81, 79, 76, 76, 74, 72, 72, 69, 72, 74, 74, 72, 76, 74, 76, 74, 72, 72, 69, 72, 74, 76, 72, 81, 81, 82, 81, 79, 76, 79, 76, 74, 72, 81, 79, 76, 79, 81, 76, 76, 74, 67, 69, 72, 76, 81, 81, 79, 76, 79, 81, 76, 74, 67, 69, 72, 67, 67, 76, 74, 76, 74, 76, 79, 76, 76, 79, 81, 79, 79, 77, 77, 76, 74, 72, 74, 74, 72, 74, 76, 72, 69, 72, 67, 76, 74, 72, 72, 74, 74, 74, 76, 72, 69, 72, 67, 76, 74, 72, 72, 72, 72, 79, 81, 81, 81, 81, 81, 81, 79, 77, 77, 77, 79, 81, 74, 81, 79, 77, 77, 72, 77, 77, 77, 77, 79, 77, 77, 72, 72, 72, 79, 81, 81, 81, 81, 79, 77, 77, 79, 81, 74, 81, 79, 77, 77, 72, 77, 77, 77, 77, 79, 77, 77, 72, 72, 72, 72, 74, 74, 76, 77, 72, 72, 74, 74, 76, 77, 77, 79, 81, 79, 77, 70, 77, 77, 77, 79, 81, 79, 77, 74, 72, 79, 77, 72, 72, 72, 74, 74, 76, 77, 77, 72, 72, 74, 74, 76, 77, 77, 79, 81, 79, 77, 74, 77, 77, 77, 79, 81, 79, 77, 74, 72, 79, 77, 72, 72, 74, 81, 79, 77, 76, 77, 77, 77, 82, 81, 79, 77, 74, 77, 77, 82, 81, 79, 77, 74, 72, 77, 79, 81, 72, 77, 79, 81, 72, 72, 72, 79, 72, 81, 72, 81, 72, 81, 72, 81, 72, 81, 72, 81, 72, 79, 72, 77, 77, 72, 77, 72, 79, 74, 81, 74, 74, 70, 81, 72, 79, 70, 77, 77, 70, 72, 77, 70, 77, 70, 77, 70, 77, 70, 79, 70, 77, 70, 77, 67, 72, 72, 72, 79, 72, 81, 72, 81, 72, 81, 72, 81, 72, 79, 72, 77, 72, 77, 72, 79, 74, 81, 74, 74, 67, 81, 72, 79, 70, 77, 70, 77, 70, 72, 77, 70, 77, 70, 77, 70, 77, 70, 79, 70, 77, 70, 77, 67, 81, 72, 72, 74, 74, 76, 77, 77, 72, 74, 76, 77, 79, 81, 79, 77, 74, 77, 77, 77, 77, 77, 79, 81, 79, 77, 74, 72, 79, 77, 72, 72, 72, 74, 76, 77, 77, 72, 72, 74, 76, 77, 79, 81, 79, 77, 74, 77, 77, 77, 77, 79, 81, 79, 77, 74, 72, 77, 79, 77, 72, 74, 81, 79, 77, 76, 77, 77, 77, 82, 81, 79, 77, 74, 77, 77, 82, 81, 79, 77, 74, 72, 77, 79, 81, 72, 77, 79, 81, 72, 72, 72, 79, 72, 81, 72, 81, 72, 81, 72, 81, 72, 81, 72, 81, 72, 79, 72, 77, 77, 72, 77, 72, 79, 74, 81, 74, 74, 70, 81, 72, 79, 70, 77, 77, 70, 72, 77, 70, 77, 70, 77, 70, 77, 70, 79, 70, 77, 70, 77, 70, 77, 70, 77, 70, 77, 70, 77, 70, 77, 70, 77, 70, 77, 70, 77, 70, 79, 70, 77, 70, 77, 69]
#drt_list=[904, 102, 2, 2, 102, 2, 5, 2, 102, 2, 2, 439, 2, 42, 5, 24, 42, 5, 24, 12, 12, 4, 2, 24, 2, 2, 2, 84, 42, 5, 24, 42, 5, 24, 42, 2, 12, 2, 24, 2, 2, 2, 144, 8, 14, 2, 58, 125, 17, 14, 9, 30, 2, 2, 463, 68, 42, 5, 24, 42, 5, 24, 12, 12, 2, 12, 2, 24, 2, 2, 2, 2, 29, 23, 42, 5, 24, 42, 5, 24, 12, 23, 2, 12, 2, 24, 2, 2, 2, 114, 8, 8, 14, 2, 28, 2, 28, 2, 2, 2, 2, 2, 2, 227, 2, 5, 5, 9, 482, 2, 2, 77, 2, 7, 12, 7, 140, 39, 2, 4, 45, 182, 2, 12, 12, 12, 480, 5, 5, 9, 482, 2, 2, 77, 2, 7, 12, 2, 7, 80, 2, 4, 2, 4, 45, 182, 2, 12, 12, 12, 480, 97, 42, 5, 24, 42, 5, 24, 12, 12, 2, 12, 2, 24, 2, 2, 2, 84, 42, 5, 24, 42, 5, 54, 7, 2, 12, 2, 24, 2, 2, 2, 144, 8, 14, 2, 58, 125, 17, 14, 9, 30, 2, 2, 303, 3, 32, 2, 39, 2, 40, 2, 35, 2, 7, 2, 2, 2, 59, 32, 2, 39, 2, 40, 2, 35, 2, 7, 2, 2, 2, 59, 2, 32, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 77, 2, 5, 5, 9, 482, 2, 2, 77, 2, 7, 12, 7, 140, 39, 2, 4, 45, 182, 2, 12, 12, 12, 480, 5, 5, 9, 482, 2, 2, 77, 2, 7, 12, 2, 7, 80, 2, 4, 2, 4, 45, 182, 2, 12, 12, 12, 420, 2, 2, 2, 87, 2, 17, 18, 2, 122, 2, 2, 10, 29, 82, 12, 17, 8, 22, 255, 2, 5, 5, 9, 482, 2, 2, 77, 2, 7, 12, 7, 140, 39, 2, 4, 45, 182, 2, 12, 12, 12, 480, 5, 5, 9, 302, 2, 2, 77, 2, 7, 12, 2, 7, 80, 2, 4, 2, 4, 45, 2, 2, 182, 2, 12, 12, 12, 480, 20160, 960, 960, 480, 1440, 960, 480, 960, 960, 480, 1920, 960, 480, 3840, 960, 3840, 960, 960, 3360, 960, 960, 960, 1920, 3840, 32160, 480, 960, 960, 960, 480, 960, 960, 960, 960, 1920, 960, 960, 1920, 1920, 960, 3840, 960, 3360, 960, 960, 3360, 960, 960, 960, 1920, 3840, 1920, 960, 3840, 960, 960, 3360, 960, 960, 960, 1920, 3840, 360, 480, 120, 240, 720, 240, 1200, 240, 1560, 360, 720, 240, 1200, 240, 1920, 720, 240, 240, 240, 240, 120, 120, 840, 360, 360, 240, 360, 240, 1200, 240, 1560, 360, 120, 1080, 240, 720, 720, 240, 240, 240, 240, 120, 120, 840, 480, 480, 480, 240, 240, 240, 240, 120, 3240, 480, 2400, 2400, 480, 480, 2400, 480, 240, 720, 1920, 480, 2400, 1440, 480, 480, 2400, 240, 480, 240, 720, 720, 480, 480, 1440, 240, 480, 240, 480, 240, 240, 480, 720, 480, 31751, 1, 95, 91, 1, 1, 637, 1, 1, 15, 19, 1, 1, 19, 91, 91, 4697, 91, 4, 1, 2626, 95, 1, 1, 1, 91, 91, 1, 6766, 1, 1, 95, 91, 1, 1, 1145, 91, 91, 1, 95, 91, 91, 5202, 91, 637, 1, 1101, 95, 1, 1, 1, 91, 91, 1, 7271, 1, 5, 1, 15, 1, 15, 91, 95, 1, 91, 1, 91, 91, 1, 95, 91, 91, 91, 91, 1650, 1, 1, 95, 91, 91, 91, 91, 42, 91, 91, 558, 69, 5, 91, 1, 15, 91, 1, 95, 1, 91, 1, 91, 91, 1, 95, 91, 91, 91, 91, 1650, 1, 1, 95, 91, 91, 91, 91, 42, 91, 91, 557, 76, 91, 95, 91, 91, 91, 91, 2670, 1, 95, 91, 91, 91, 91, 2670, 1, 95, 91, 91, 91, 91, 2670, 91, 91, 91, 1616, 91, 91, 91, 1616, 1, 1, 95, 1, 1, 1, 637, 1, 1, 1, 19, 1, 1, 19, 1, 91, 4697, 91, 4, 1, 2550, 95, 1, 1, 1, 1, 1, 1, 6766, 1, 1, 95, 1, 1, 1, 1145, 1, 1, 1, 19, 1, 91, 5202, 91, 637, 1, 1101, 95, 1, 1, 1, 1, 1, 1, 5746, 1612, 1, 91, 1, 91, 91, 1, 19, 91, 91, 91, 95, 91, 91, 91, 91, 1145, 1, 1, 1, 1, 95, 91, 91, 91, 91, 42, 91, 91, 567, 68, 1, 15, 91, 91, 1, 95, 1, 91, 91, 91, 95, 91, 91, 91, 91, 1145, 1, 1, 1, 95, 91, 91, 91, 91, 42, 91, 91, 558, 76, 91, 95, 1050, 91, 91, 91, 2670, 1, 95, 1050, 91, 91, 91, 2670, 1, 5, 1050, 91, 91, 91, 2670, 91, 91, 91, 1616, 91, 91, 91, 1616, 1, 1, 95, 1, 1, 1, 637, 1, 1, 1, 19, 1, 1, 19, 1, 91, 4697, 91, 4, 1, 2550, 95, 1, 1, 1, 1, 1, 1, 30832, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1]
#vel_list

#degrees  = [60, 62, 64, 65, 67, 69, 71, 72]  # MIDI note number
track    = 0
channel  = 0
time     = 0    # In beats
duration = 1    # In beats
tempo    = 60   # In BPM
volume   = 100  # 0-127, as per the MIDI standard

MyMIDI = MIDIFile(1)  # One track, defaults to format 1 (tempo track is created
                      # automatically)
MyMIDI.addTempo(track, time, tempo)
    
    
order=2
song = []
drt_list = []
vel_list=[]

def readSong(ptn):
    a=0
    for track in ptn:
        for event in track:
            if a<100:
                #print(event)
                a+=1
            if isinstance(event, midi.NoteOffEvent): # check that the current event is a NoteEvent, otherwise it won't have the method get_pitch() and we'll get an error
                p=event.get_pitch()
                song.append(p)
                t=event.tick
                if t!=0:
                    drt_list.append(t)
            if isinstance(event, midi.NoteOnEvent):
                vel_list.append(event.get_velocity())
  
        
#pattern=midi.read_midifile("outsider_vocal 2.mid")
#readSong(pattern)
#pattern=midi.read_midifile("Natalie_vocal.mid")
#readSong(pattern)
#pattern=midi.read_midifile("PTalkingToTheMoon_grand.mid")
#readSong(pattern)
pattern=midi.read_midifile("JustTheWayYouAre_vocal.mid")
readSong(pattern)
pattern=midi.read_midifile("MarryYou_vocal.mid")
readSong(pattern)
print(song) 
#drt_list=[]
#for i in range(len(pre_drt_list)):
#    if pre_drt_list[i]<2500 and pre_drt_list[i]>200:
#        drt_list.append(pre_drt_list[i])              

Song_len=100
pitch_range=40  #49-88
pitch_min=49
print(song[0],song[1])
#print(song, drt_list,vel_list)
#order=2   
#origin songs를 수열로 표현
def makeList(rng,length):
    preSong=[]
    for i in range(length):
        rand=random.randrange(rng)
        preSong.append(rand)
    return preSong

def tick_list(tick):
    tick=list(set(tick))
    tick.sort()
    newTick={}
    for i in range(len(tick)):
        newTick[i]=tick[i]
    return newTick
drt_dic=tick_list(drt_list)     #duration dictionary
duration_range=len(drt_dic)     #duration range
drt_val = list(drt_dic.values())    #dictionary로 부터 value를 뽑아 velocity list를 구성
vel_dic=tick_list(vel_list)     #velocity dictionary
vel_range=len(vel_dic)          #velocity range
vel_val=list(vel_dic.values())  #dictionary로 부터 value를 뽑아 velocity list를 구성
print(drt_list)
print(drt_val,vel_val)


def makeListfromSong(rng,song):
    preSong1=[]
    for i in range(len(song)):
        preSong1.append(song[i]-pitch_min)
    return preSong1


#0행렬 만들기
def makeZeroM(n,m):
    ZeroM=[0 for _ in range(n)]
    for i in range(n):
        ZeroM[i]=[0 for _ in range(m)]
    return ZeroM

#song list로 probability matrix 만들기
def makeTable(list1,n,k): #n=state 수?
    NewList=makeZeroM(n**k,n)
    for i in range(len(list1)-k):
        currentIdx=0
        for j in range(1,k+1):
            currentIdx+=(n**(k-j))*list1[i+j-1]          
        nextIdx=list1[i+k]
        NewList[currentIdx][nextIdx]+=1
    return NewList

def makeTable2(list1,n,k): #n=state 수?
    NewList=makeZeroM(n**k,n)
    for i in range(len(list1)-k):
        currentIdx=list1[i]*n + list1[i+1]
        nextIdx=list1[i+k]
        NewList[currentIdx][nextIdx]+=1
    return NewList


def makeDrtTable(list1,n,k):
    NewDrtList=makeZeroM(n**k,n)
    for i in range(len(list1)-k):
        currentIdx=0
        for j in range(1,k+1):
            currentIdx+=(n**(k-j))*(drt_val.index(list1[i+j-1]))          
        nextIdx=drt_val.index(list1[i+k])
        NewDrtList[currentIdx][nextIdx]+=1
    return NewDrtList

def makeVelTable(list1,n,k):
    NewDrtList=makeZeroM(n**k,n)
    for i in range(len(list1)-k):
        currentIdx=0
        for j in range(1,k+1):
            currentIdx+=(n**(k-j))*(vel_val.index(list1[i+j-1]))          
        nextIdx=vel_val.index(list1[i+k])
        NewDrtList[currentIdx][nextIdx]+=1
    return NewDrtList    

#pbt matrix의 row의 합을 구하기
def sumofRows(matrix):
    rowSum=[]
    for row in range(len(matrix)):
        sumR=0
        for col in matrix[row]:
            sumR+=col
        rowSum.append(sumR)
    return rowSum
    

#cumulative (probability) matrix로 만들기
def makePbtCml(pbtM):
    cumM=makeZeroM(len(pbtM),len(pbtM[0]))
    #rowSum=sumofRows(pbtM)
    for row in range(len(pbtM)):
        temp=0
        for col in range(len(pbtM[row])):
            if pbtM[row][col]!=0:
                temp+=pbtM[row][col]
                cumM[row][col]=temp
    return cumM        
    
#probabilty matrix에서 주어진 확률에 의해 다음상태 선택하여 새로운 song 만들기
def makeSong(mode,pbtM, lenofSong,rng,Ord,start):
    cmtM=makePbtCml(pbtM)
    rowSum=sumofRows(pbtM)
    Next=0
    if Ord==1:
        if mode==0:
            current=song[1]-pitch_min
        elif mode==1:
            current=drt_val.index(drt_list[1])
        elif mode==2:
            current=vel_val.index(vel_list[1])   
    elif Ord==2:
        current=start
    if mode==0:
        Newsong=[song[1]-pitch_min]
    elif mode==1:
        Newsong=[drt_val.index(drt_list[1])]
    elif mode==2:
        Newsong=[vel_val.index(vel_list[1])]
    while len(Newsong)<lenofSong:
        if rowSum[current]!=0:
            ran=random.randrange(0,rowSum[current])
            #print("&",len(cmtM),len(cmtM[0]))
            for Next in range(len(cmtM[0])):
                if cmtM[current][Next]>ran:
                    #print(Newsong)
                    Newsong.append(Next)

                    if Ord == 1:
                        current = Next
                    else:
                        current=Next+(current%rng)*rng
                    break
        else:
            ran=random.randrange(0,rng)
            Newsong.append(ran)
            if mode==0:
                print("0",len(Newsong)-1,Newsong[len(Newsong)-1])
            elif mode==1:
                print("1",len(Newsong)-1,Newsong[len(Newsong)-1])
            else:
                print("2",len(Newsong)-1,Newsong[len(Newsong)-1])
            if Ord == 1:
                current = Next
            else:
                current = ran+((current%rng)*rng)            
    return Newsong
        
def fun():
    preSong_pitch=makeListfromSong(pitch_range,song)
    pbtMatrix_pitch=makeTable(preSong_pitch,pitch_range,order)
    pbtMatrix_drt=makeDrtTable(drt_list,duration_range,order)
    pbtMatrix_vel=makeVelTable(vel_list,vel_range,order)
    start_pth=preSong_pitch[0]*pitch_range+preSong_pitch[1]
    start_drt = drt_val.index(drt_list[0])*duration_range+drt_val.index(drt_list[1])
    start_vel=vel_val.index(vel_list[0])*vel_range+vel_val.index(vel_list[1])
    newSong_pitch=makeSong(0,pbtMatrix_pitch,Song_len,pitch_range,order,start_pth)
    newSong_drt=makeSong(1,pbtMatrix_drt,Song_len,duration_range,order,start_drt)#1455
    newSong_vel=makeSong(2,pbtMatrix_vel,Song_len,vel_range,order,start_vel)   
    return newSong_pitch, newSong_drt, newSong_vel

mySong_pth,mySong_drt, mySong_vel=fun()

def pth_str(x):
    return {
                
            0: 'c',
            1: 'c#',
            2: 'd',
            3: 'd#',
            4: 'e',
            5: 'f',
            6: 'f#',
            7: 'g',
            8: 'g#',
            9: 'a',
            10:'a#',
            11:'b'
            
    }.get(x%12, 12) #default
    
def otv_str(x):
    return {
                
            0: '',
            1: '1',
            2: '2',
            3: '3',
            4: '4',
            5: '5',
            6: '6',
            7: '7',
            8: '8',
            9: '9',
            10:'10'
            
    }.get(x//12, 11) #default
    
def switch_pth(x):
    return pth_str(x)+otv_str(x)
    
for i in range(Song_len):
    #print(mySong_drt[i])
    MyMIDI.addNote(track, channel, mySong_pth[i]+pitch_min, 
                   time, drt_dic[mySong_drt[i]]*0.004, vel_dic[mySong_vel[i]])
    time = time + drt_dic[mySong_drt[i]]*0.004
#    print(drt_dic[mySong_drt[i]])
with open("BrunoMars_11.mid", "wb") as output_file:
    MyMIDI.writeFile(output_file)
